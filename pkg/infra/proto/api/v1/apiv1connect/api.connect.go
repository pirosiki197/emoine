// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/api.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/pirosiki197/emoine/pkg/infra/proto/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// APIServiceName is the fully-qualified name of the APIService service.
	APIServiceName = "api.v1.APIService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// APIServiceCreateEventProcedure is the fully-qualified name of the APIService's CreateEvent RPC.
	APIServiceCreateEventProcedure = "/api.v1.APIService/CreateEvent"
	// APIServiceGetEventsProcedure is the fully-qualified name of the APIService's GetEvents RPC.
	APIServiceGetEventsProcedure = "/api.v1.APIService/GetEvents"
	// APIServiceSendCommentProcedure is the fully-qualified name of the APIService's SendComment RPC.
	APIServiceSendCommentProcedure = "/api.v1.APIService/SendComment"
	// APIServiceGetCommentsProcedure is the fully-qualified name of the APIService's GetComments RPC.
	APIServiceGetCommentsProcedure = "/api.v1.APIService/GetComments"
	// APIServiceConnectToStreamProcedure is the fully-qualified name of the APIService's
	// ConnectToStream RPC.
	APIServiceConnectToStreamProcedure = "/api.v1.APIService/ConnectToStream"
)

// APIServiceClient is a client for the api.v1.APIService service.
type APIServiceClient interface {
	CreateEvent(context.Context, *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error)
	GetEvents(context.Context, *connect.Request[v1.GetEventsRequest]) (*connect.Response[v1.GetEventsResponse], error)
	SendComment(context.Context, *connect.Request[v1.SendCommentRequest]) (*connect.Response[v1.SendCommentResponse], error)
	GetComments(context.Context, *connect.Request[v1.GetCommentsRequest]) (*connect.Response[v1.GetCommentsResponse], error)
	ConnectToStream(context.Context, *connect.Request[v1.ConnectToStreamRequest]) (*connect.ServerStreamForClient[v1.ConnectToStreamResponse], error)
}

// NewAPIServiceClient constructs a client for the api.v1.APIService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAPIServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) APIServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &aPIServiceClient{
		createEvent: connect.NewClient[v1.CreateEventRequest, v1.CreateEventResponse](
			httpClient,
			baseURL+APIServiceCreateEventProcedure,
			opts...,
		),
		getEvents: connect.NewClient[v1.GetEventsRequest, v1.GetEventsResponse](
			httpClient,
			baseURL+APIServiceGetEventsProcedure,
			opts...,
		),
		sendComment: connect.NewClient[v1.SendCommentRequest, v1.SendCommentResponse](
			httpClient,
			baseURL+APIServiceSendCommentProcedure,
			opts...,
		),
		getComments: connect.NewClient[v1.GetCommentsRequest, v1.GetCommentsResponse](
			httpClient,
			baseURL+APIServiceGetCommentsProcedure,
			opts...,
		),
		connectToStream: connect.NewClient[v1.ConnectToStreamRequest, v1.ConnectToStreamResponse](
			httpClient,
			baseURL+APIServiceConnectToStreamProcedure,
			opts...,
		),
	}
}

// aPIServiceClient implements APIServiceClient.
type aPIServiceClient struct {
	createEvent     *connect.Client[v1.CreateEventRequest, v1.CreateEventResponse]
	getEvents       *connect.Client[v1.GetEventsRequest, v1.GetEventsResponse]
	sendComment     *connect.Client[v1.SendCommentRequest, v1.SendCommentResponse]
	getComments     *connect.Client[v1.GetCommentsRequest, v1.GetCommentsResponse]
	connectToStream *connect.Client[v1.ConnectToStreamRequest, v1.ConnectToStreamResponse]
}

// CreateEvent calls api.v1.APIService.CreateEvent.
func (c *aPIServiceClient) CreateEvent(ctx context.Context, req *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error) {
	return c.createEvent.CallUnary(ctx, req)
}

// GetEvents calls api.v1.APIService.GetEvents.
func (c *aPIServiceClient) GetEvents(ctx context.Context, req *connect.Request[v1.GetEventsRequest]) (*connect.Response[v1.GetEventsResponse], error) {
	return c.getEvents.CallUnary(ctx, req)
}

// SendComment calls api.v1.APIService.SendComment.
func (c *aPIServiceClient) SendComment(ctx context.Context, req *connect.Request[v1.SendCommentRequest]) (*connect.Response[v1.SendCommentResponse], error) {
	return c.sendComment.CallUnary(ctx, req)
}

// GetComments calls api.v1.APIService.GetComments.
func (c *aPIServiceClient) GetComments(ctx context.Context, req *connect.Request[v1.GetCommentsRequest]) (*connect.Response[v1.GetCommentsResponse], error) {
	return c.getComments.CallUnary(ctx, req)
}

// ConnectToStream calls api.v1.APIService.ConnectToStream.
func (c *aPIServiceClient) ConnectToStream(ctx context.Context, req *connect.Request[v1.ConnectToStreamRequest]) (*connect.ServerStreamForClient[v1.ConnectToStreamResponse], error) {
	return c.connectToStream.CallServerStream(ctx, req)
}

// APIServiceHandler is an implementation of the api.v1.APIService service.
type APIServiceHandler interface {
	CreateEvent(context.Context, *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error)
	GetEvents(context.Context, *connect.Request[v1.GetEventsRequest]) (*connect.Response[v1.GetEventsResponse], error)
	SendComment(context.Context, *connect.Request[v1.SendCommentRequest]) (*connect.Response[v1.SendCommentResponse], error)
	GetComments(context.Context, *connect.Request[v1.GetCommentsRequest]) (*connect.Response[v1.GetCommentsResponse], error)
	ConnectToStream(context.Context, *connect.Request[v1.ConnectToStreamRequest], *connect.ServerStream[v1.ConnectToStreamResponse]) error
}

// NewAPIServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAPIServiceHandler(svc APIServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	aPIServiceCreateEventHandler := connect.NewUnaryHandler(
		APIServiceCreateEventProcedure,
		svc.CreateEvent,
		opts...,
	)
	aPIServiceGetEventsHandler := connect.NewUnaryHandler(
		APIServiceGetEventsProcedure,
		svc.GetEvents,
		opts...,
	)
	aPIServiceSendCommentHandler := connect.NewUnaryHandler(
		APIServiceSendCommentProcedure,
		svc.SendComment,
		opts...,
	)
	aPIServiceGetCommentsHandler := connect.NewUnaryHandler(
		APIServiceGetCommentsProcedure,
		svc.GetComments,
		opts...,
	)
	aPIServiceConnectToStreamHandler := connect.NewServerStreamHandler(
		APIServiceConnectToStreamProcedure,
		svc.ConnectToStream,
		opts...,
	)
	return "/api.v1.APIService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case APIServiceCreateEventProcedure:
			aPIServiceCreateEventHandler.ServeHTTP(w, r)
		case APIServiceGetEventsProcedure:
			aPIServiceGetEventsHandler.ServeHTTP(w, r)
		case APIServiceSendCommentProcedure:
			aPIServiceSendCommentHandler.ServeHTTP(w, r)
		case APIServiceGetCommentsProcedure:
			aPIServiceGetCommentsHandler.ServeHTTP(w, r)
		case APIServiceConnectToStreamProcedure:
			aPIServiceConnectToStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAPIServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAPIServiceHandler struct{}

func (UnimplementedAPIServiceHandler) CreateEvent(context.Context, *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.APIService.CreateEvent is not implemented"))
}

func (UnimplementedAPIServiceHandler) GetEvents(context.Context, *connect.Request[v1.GetEventsRequest]) (*connect.Response[v1.GetEventsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.APIService.GetEvents is not implemented"))
}

func (UnimplementedAPIServiceHandler) SendComment(context.Context, *connect.Request[v1.SendCommentRequest]) (*connect.Response[v1.SendCommentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.APIService.SendComment is not implemented"))
}

func (UnimplementedAPIServiceHandler) GetComments(context.Context, *connect.Request[v1.GetCommentsRequest]) (*connect.Response[v1.GetCommentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.APIService.GetComments is not implemented"))
}

func (UnimplementedAPIServiceHandler) ConnectToStream(context.Context, *connect.Request[v1.ConnectToStreamRequest], *connect.ServerStream[v1.ConnectToStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.APIService.ConnectToStream is not implemented"))
}
